{
  "address": "0xFD7E1De72539954dcb7Fd5a2ec35C3D795b3b67B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "degreeMaxScore",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "degreeImage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "degreeMajor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "degreeType",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UniversityDegree__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UniversityDegree__ScoreTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UniversityDegree__YourDegreeNotIssued",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "degreeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "student",
          "type": "address"
        }
      ],
      "name": "degreeIssued",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        }
      ],
      "name": "checkDegreeOfStudent",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        }
      ],
      "name": "checkScoreOfStudent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDegree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDegreeImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDegreeMajor",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDegreeMaxScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDegreeType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCounter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Counters.Counter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        }
      ],
      "name": "isStudentDegreeIssued",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "student",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "issueDegree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x06108084022808b46b5a7fbf21c4aba5133f87d3402b22b90279c51c74c0f7b9",
  "receipt": {
    "to": null,
    "from": "0xFD7E1De72539954dcb7Fd5a2ec35C3D795b3b67B",
    "contractAddress": "0xf33F8A6e8F4E76C8B83367f7a25EB73587AF269F",
    "transactionIndex": 38,
    "gasUsed": "3097180",
    "logsBloom": "0x
    "blockHash": "0x9bc7e0ff28b6ed89ec4256e9160f495914dba78fdd3106d5940bab4c1d10467a",
    "transactionHash": "0x06108084022808b46b5a7fbf21c4aba5133f87d3402b22b90279c51c74c0f7b9",
    "logs": [],
    "blockNumber": 8472753,
    "cumulativeGasUsed": "10679754",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "20",
    "https://ipfs.filebase.io/ipfs/QmU5NboYJj7xM2gEsC7ke9EgF7B3oUgyoZm7mYdH54UnF1",
    "Computer Science and Business Systems",
    "Bachelor's degree"
  ],
  "numDeployments": 1,
  "solcInputHash": "0b8a067884692e514c91118af071a3f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"degreeMaxScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"degreeImage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"degreeMajor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"degreeType\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UniversityDegree__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UniversityDegree__ScoreTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UniversityDegree__YourDegreeNotIssued\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"degreeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"}],\"name\":\"degreeIssued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"}],\"name\":\"checkDegreeOfStudent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"}],\"name\":\"checkScoreOfStudent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDegree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDegreeImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDegreeMajor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDegreeMaxScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDegreeType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"internalType\":\"struct Counters.Counter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"}],\"name\":\"isStudentDegreeIssued\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"student\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"issueDegree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ghaieth BEN MOUSSA\",\"details\":\"This contract is used to award degrees to students who graduated in two steps: 1. Only the owner of the contract can issue degrees with the function `issueDegree(address to, uint256 score)` 2. Then, the student can claim the degree with the function `claimDegree()` This type of token is called a Soul Bound Token because once the token  has been claimed by the student, it can not be transfered to anyone else.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"}},\"title\":\"UniversityDegree\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Non-transferable Soul Bound Token (NFT) smart contract for university degrees and diplomas\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniversityDegree.sol\":\"UniversityDegree\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniversityDegree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./dependancies/ERC721URIStorage.sol\\\";\\r\\nimport \\\"./dependancies/librairies/Counters.sol\\\";\\r\\nimport \\\"./dependancies/librairies/Base64.sol\\\";\\r\\n\\r\\nerror UniversityDegree__NotOwner();\\r\\nerror UniversityDegree__YourDegreeNotIssued();\\r\\nerror UniversityDegree__ScoreTooHigh();\\r\\n\\r\\n/**\\r\\n * @title UniversityDegree\\r\\n * @author Ghaieth BEN MOUSSA\\r\\n * @notice Non-transferable Soul Bound Token (NFT) smart contract for university degrees and diplomas\\r\\n * @dev This contract is used to award degrees to students who graduated in two steps:\\r\\n * 1. Only the owner of the contract can issue degrees with the function `issueDegree(address to, uint256 score)`\\r\\n * 2. Then, the student can claim the degree with the function `claimDegree()`\\r\\n * This type of token is called a Soul Bound Token because once the token \\r\\n * has been claimed by the student, it can not be transfered to anyone else.\\r\\n */\\r\\ncontract UniversityDegree is ERC721URIStorage {\\r\\n    using Strings for uint256;\\r\\n    // ERC721 Variables:\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    // Degree Variables:\\r\\n    address private immutable i_owner; // Issuer of the degrees (the university)\\r\\n    uint256 internal s_degreeMaxScore; // Maximum score of the degree (usualy /20)\\r\\n    string internal s_degreeImage; // Image of the degree hosted on IPFS\\r\\n    string internal s_degreeMajor; // Major of the degree\\r\\n    string internal s_degreeType; // Type of the degree (bachelor, masters, etc)\\r\\n    mapping(address => bool) internal s_issuedDegrees;\\r\\n    mapping(address => uint256) internal s_studentToScore;\\r\\n    mapping(address => string) internal s_studentToDegree;\\r\\n\\r\\n    // Events:\\r\\n    event degreeIssued(address student);\\r\\n    event degreeClaimed(address student, uint256 tokenId);\\r\\n\\r\\n    // Modifiers:\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert UniversityDegree__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 degreeMaxScore,\\r\\n        string memory degreeImage,\\r\\n        string memory degreeMajor,\\r\\n        string memory degreeType\\r\\n    ) ERC721(\\\"UniversityDegreeSoulBoundToken\\\", \\\"UDSBT\\\") {\\r\\n        i_owner = msg.sender;\\r\\n        s_degreeMaxScore = degreeMaxScore;\\r\\n        s_degreeImage = degreeImage;\\r\\n        s_degreeMajor = degreeMajor;\\r\\n        s_degreeType = degreeType;\\r\\n    }\\r\\n\\r\\n    function issueDegree(address student, uint256 score) external onlyOwner {\\r\\n        if (score > s_degreeMaxScore) {\\r\\n            revert UniversityDegree__ScoreTooHigh();\\r\\n        }\\r\\n        s_issuedDegrees[student] = true;\\r\\n        s_studentToScore[student] = score;\\r\\n\\r\\n        emit degreeIssued(student);\\r\\n    }\\r\\n\\r\\n    function claimDegree() public returns (uint256) {\\r\\n        if (!s_issuedDegrees[msg.sender]) {\\r\\n            revert UniversityDegree__YourDegreeNotIssued();\\r\\n        }\\r\\n\\r\\n        _tokenIds.increment();\\r\\n        uint256 newItemId = _tokenIds.current();\\r\\n        _mint(msg.sender, newItemId);\\r\\n\\r\\n        string memory tokenURI = generateTokenURI(\\r\\n            newItemId,\\r\\n            s_studentToScore[msg.sender]\\r\\n        );\\r\\n        _setTokenURI(newItemId, tokenURI);\\r\\n\\r\\n        s_issuedDegrees[msg.sender] = false;\\r\\n        s_studentToDegree[msg.sender] = tokenURI;\\r\\n\\r\\n        emit degreeClaimed(msg.sender, newItemId);\\r\\n\\r\\n        return newItemId;\\r\\n    }\\r\\n\\r\\n    function generateTokenURI(\\r\\n        uint256 tokenId,\\r\\n        uint256 score\\r\\n    ) private view returns (string memory) {\\r\\n        bytes memory dataURI = abi.encodePacked(\\r\\n            '{',\\r\\n                '\\\"name\\\": \\\"', s_degreeMajor, ' Degree #', tokenId.toString(), '\\\",',\\r\\n                '\\\"image\\\": \\\"', s_degreeImage, '\\\",',\\r\\n                '\\\"description\\\": \\\"An award conferred by a college or university signifying that the recipient has satisfactorily completed a course of study\\\",',\\r\\n                '\\\"attributes\\\": [',\\r\\n                    '{',\\r\\n                        '\\\"trait type\\\": \\\"Score\\\",',\\r\\n                        '\\\"value\\\": ', score.toString(), ',',\\r\\n                        '\\\"max_value\\\": ', s_degreeMaxScore.toString(),\\r\\n                    '},',\\r\\n                    '{',\\r\\n                        '\\\"trait type\\\": \\\"Major\\\",',\\r\\n                        '\\\"value\\\": \\\"', s_degreeMajor, '\\\"',\\r\\n                    '},',\\r\\n                    '{',\\r\\n                        '\\\"trait type\\\": \\\"Type of degree\\\",',\\r\\n                        '\\\"value\\\": \\\"', s_degreeType, '\\\"',\\r\\n                    '}',\\r\\n                ']',\\r\\n            '}'\\r\\n        );\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                \\\"data:application/json;base64,\\\",\\r\\n                Base64.encode(dataURI)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Getters\\r\\n    function checkDegreeOfStudent(\\r\\n        address student\\r\\n    ) external view returns (string memory) {\\r\\n        return s_studentToDegree[student];\\r\\n    }\\r\\n\\r\\n    function checkScoreOfStudent(\\r\\n        address student\\r\\n    ) public view returns (uint256) {\\r\\n        return s_studentToScore[student];\\r\\n    }\\r\\n\\r\\n    function isStudentDegreeIssued(\\r\\n        address student\\r\\n    ) public view returns (bool) {\\r\\n        return s_issuedDegrees[student];\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getTokenCounter() public view returns (Counters.Counter memory) {\\r\\n        return _tokenIds;\\r\\n    }\\r\\n\\r\\n    function getDegreeMaxScore() public view returns (uint256) {\\r\\n        return s_degreeMaxScore;\\r\\n    }\\r\\n\\r\\n    function getDegreeImage() public view returns (string memory) {\\r\\n        return s_degreeImage;\\r\\n    }\\r\\n\\r\\n    function getDegreeMajor() public view returns (string memory) {\\r\\n        return s_degreeMajor;\\r\\n    }\\r\\n\\r\\n    function getDegreeType() public view returns (string memory) {\\r\\n        return s_degreeType;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x63022bc92eaf0f04ccbf8bc6663d115c1ab135e6f5983f7ab26cbf1c8deff15d\",\"license\":\"MIT\"},\"contracts/dependancies/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa4c79103a9f511b1ba6dde6524b16f0a385103526201d50658c67f160141c495\",\"license\":\"MIT\"},\"contracts/dependancies/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x595ffa968dc588f6d779ef9f73f26144dc29cb8c771a41aa0b79c834d86fc18b\",\"license\":\"MIT\"},\"contracts/dependancies/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\nimport \\\"./IERC721.sol\\\";\\r\\nimport \\\"./IERC721Metadata.sol\\\";\\r\\nimport \\\"./IERC721Receiver.sol\\\";\\r\\nimport \\\"./librairies/Address.sol\\\";\\r\\nimport \\\"./librairies/Strings.sol\\\";\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address owner\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"ERC721: balance query for the zero address\\\"\\r\\n        );\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(\\r\\n            owner != address(0),\\r\\n            \\\"ERC721: owner query for nonexistent token\\\"\\r\\n        );\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return\\r\\n            bytes(baseURI).length > 0\\r\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\r\\n                : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (address) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721: approved query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) public virtual override {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    // function transferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId\\r\\n    // ) public virtual override {\\r\\n    //     //solhint-disable-next-line max-line-length\\r\\n    //     require(\\r\\n    //         _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n    //         \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n    //     );\\r\\n\\r\\n    //     _transfer(from, to, tokenId);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    // function safeTransferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId\\r\\n    // ) public virtual override {\\r\\n    //     safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    // function safeTransferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId,\\r\\n    //     bytes memory _data\\r\\n    // ) public virtual override {\\r\\n    //     require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n    //     _safeTransfer(from, to, tokenId, _data);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function _safeTransfer(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId,\\r\\n    //     bytes memory _data\\r\\n    // ) internal virtual {\\r\\n    //     _transfer(from, to, tokenId);\\r\\n    //     require(\\r\\n    //         _checkOnERC721Received(from, to, tokenId, _data),\\r\\n    //         \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n    //     );\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(\\r\\n        address spender,\\r\\n        uint256 tokenId\\r\\n    ) internal view virtual returns (bool) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721: operator query for nonexistent token\\\"\\r\\n        );\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner ||\\r\\n            isApprovedForAll(owner, spender) ||\\r\\n            getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n\\r\\n        _afterTokenTransfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n\\r\\n        _afterTokenTransfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function _transfer(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId\\r\\n    // ) internal virtual {\\r\\n    //     require(\\r\\n    //         ERC721.ownerOf(tokenId) == from,\\r\\n    //         \\\"ERC721: transfer from incorrect owner\\\"\\r\\n    //     );\\r\\n    //     require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n    //     _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n    //     // Clear approvals from the previous owner\\r\\n    //     _approve(address(0), tokenId);\\r\\n\\r\\n    //     _balances[from] -= 1;\\r\\n    //     _balances[to] += 1;\\r\\n    //     _owners[tokenId] = to;\\r\\n\\r\\n    //     emit Transfer(from, to, tokenId);\\r\\n\\r\\n    //     _afterTokenTransfer(from, to, tokenId);\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Emits a {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(\\r\\n        address owner,\\r\\n        address operator,\\r\\n        bool approved\\r\\n    ) internal virtual {\\r\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    _msgSender(),\\r\\n                    from,\\r\\n                    tokenId,\\r\\n                    _data\\r\\n                )\\r\\n            returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\r\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n                    );\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0xa0634ee7808dc3d6a6d5a2f2911545a56717baacee73e1ffd128397995050ad8\",\"license\":\"MIT\"},\"contracts/dependancies/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token with storage based token URI management.\\r\\n */\\r\\nabstract contract ERC721URIStorage is ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view virtual override returns (string memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721URIStorage: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = _baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(base, _tokenURI));\\r\\n        }\\r\\n\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _setTokenURI(\\r\\n        uint256 tokenId,\\r\\n        string memory _tokenURI\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721URIStorage: URI set of nonexistent token\\\"\\r\\n        );\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual override {\\r\\n        super._burn(tokenId);\\r\\n\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2fc499d3754f7c7d10c8dcaa5ebf2cf618e433334c47a834ff0f1854c7bb9cb3\",\"license\":\"MIT\"},\"contracts/dependancies/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x7010fc6285f84bdfacd656dfeef7fce93d06146958a5d6c252e30e7721a84e02\",\"license\":\"MIT\"},\"contracts/dependancies/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function safeTransferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId,\\r\\n    //     bytes calldata data\\r\\n    // ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function safeTransferFrom(\\r\\n    //     address from,\\r\\n    //     address to,\\r\\n    //     uint256 tokenId\\r\\n    // ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    // function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(\\r\\n        uint256 tokenId\\r\\n    ) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address owner,\\r\\n        address operator\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x1fbda1b7ffe59460857ad50d5ef1400c7675b30582fefd900e6511458e20c25e\",\"license\":\"MIT\"},\"contracts/dependancies/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe44454c2c617086390b509b63edfb9c893977095e1034660901356a648a523f5\",\"license\":\"MIT\"},\"contracts/dependancies/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0x61b8fcb968bcdd451f6122f4ff06d5086a4eca98b6111e3c20a581fa17c4e5b4\",\"license\":\"MIT\"},\"contracts/dependancies/librairies/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance >= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\r\\n            data\\r\\n        );\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return\\r\\n            functionStaticCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level static call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionDelegateCall(\\r\\n                target,\\r\\n                data,\\r\\n                \\\"Address: low-level delegate call failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x05b5c90d9e116a41a67fc07deaf6c7bc24b0996e43ee07460e340e6a50bc40c6\",\"license\":\"MIT\"},\"contracts/dependancies/librairies/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\r\\n\\r\\n/**\\r\\n * @dev Provides a set of functions to operate with Base64 strings.\\r\\n */\\r\\nlibrary Base64 {\\r\\n    /**\\r\\n     * @dev Base64 Encoding/Decoding Table\\r\\n     */\\r\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\r\\n     */\\r\\n    function encode(bytes memory data) internal pure returns (string memory) {\\r\\n        /**\\r\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\r\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\r\\n         */\\r\\n        if (data.length == 0) return \\\"\\\";\\r\\n\\r\\n        // Loads the table into memory\\r\\n        string memory table = _TABLE;\\r\\n\\r\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\r\\n        // and split into 4 numbers of 6 bits.\\r\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\r\\n        // - `data.length + 2`  -> Round up\\r\\n        // - `/ 3`              -> Number of 3-bytes chunks\\r\\n        // - `4 *`              -> 4 characters for each chunk\\r\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\r\\n\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\r\\n            let tablePtr := add(table, 1)\\r\\n\\r\\n            // Prepare result pointer, jump over length\\r\\n            let resultPtr := add(result, 32)\\r\\n\\r\\n            // Run over the input, 3 bytes at a time\\r\\n            for {\\r\\n                let dataPtr := data\\r\\n                let endPtr := add(data, mload(data))\\r\\n            } lt(dataPtr, endPtr) {\\r\\n\\r\\n            } {\\r\\n                // Advance 3 bytes\\r\\n                dataPtr := add(dataPtr, 3)\\r\\n                let input := mload(dataPtr)\\r\\n\\r\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\r\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\r\\n                // and apply logical AND with 0x3F which is the number of\\r\\n                // the previous character in the ASCII table prior to the Base64 Table\\r\\n                // The result is then added to the table to get the character to write,\\r\\n                // and finally write it in the result pointer but with a left shift\\r\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n\\r\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\r\\n                resultPtr := add(resultPtr, 1) // Advance\\r\\n            }\\r\\n\\r\\n            // When data `bytes` is not exactly 3 bytes long\\r\\n            // it is padded with `=` characters at the end\\r\\n            switch mod(mload(data), 3)\\r\\n            case 1 {\\r\\n                mstore8(sub(resultPtr, 1), 0x3d)\\r\\n                mstore8(sub(resultPtr, 2), 0x3d)\\r\\n            }\\r\\n            case 2 {\\r\\n                mstore8(sub(resultPtr, 1), 0x3d)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa4334bfed288f5b9edd1adf7bd19238cfd43ecd10bc039669470bad71545d525\",\"license\":\"MIT\"},\"contracts/dependancies/librairies/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x317787127117c79d1617d600100541ad8d14a29d7474309464c5ce39933c79eb\",\"license\":\"MIT\"},\"contracts/dependancies/librairies/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(\\r\\n        uint256 value,\\r\\n        uint256 length\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x86cea98eee2d178706fccf2e034533666d219b3e9db5bd9b9d582fbfaa4f068c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620037b9380380620037b98339818101604052810190620000379190620003ef565b6040518060400160405280601e81526020017f556e6976657273697479446567726565536f756c426f756e64546f6b656e00008152506040518060400160405280600581526020017f55445342540000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000167565b508060019080519060200190620000d492919062000167565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508360088190555082600990805190602001906200012a92919062000167565b5081600a90805190602001906200014392919062000167565b5080600b90805190602001906200015c92919062000167565b505050505062000523565b8280546200017590620004ed565b90600052602060002090601f016020900481019282620001995760008555620001e5565b82601f10620001b457805160ff1916838001178555620001e5565b82800160010185558215620001e5579182015b82811115620001e4578251825591602001919060010190620001c7565b5b509050620001f49190620001f8565b5090565b5b8082111562000213576000816000905550600101620001f9565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000240816200022b565b81146200024c57600080fd5b50565b600081519050620002608162000235565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002bb8262000270565b810181811067ffffffffffffffff82111715620002dd57620002dc62000281565b5b80604052505050565b6000620002f262000217565b9050620003008282620002b0565b919050565b600067ffffffffffffffff82111562000323576200032262000281565b5b6200032e8262000270565b9050602081019050919050565b60005b838110156200035b5780820151818401526020810190506200033e565b838111156200036b576000848401525b50505050565b600062000388620003828462000305565b620002e6565b905082815260208101848484011115620003a757620003a66200026b565b5b620003b48482856200033b565b509392505050565b600082601f830112620003d457620003d362000266565b5b8151620003e684826020860162000371565b91505092915050565b600080600080608085870312156200040c576200040b62000221565b5b60006200041c878288016200024f565b945050602085015167ffffffffffffffff81111562000440576200043f62000226565b5b6200044e87828801620003bc565b935050604085015167ffffffffffffffff81111562000472576200047162000226565b5b6200048087828801620003bc565b925050606085015167ffffffffffffffff811115620004a457620004a362000226565b5b620004b287828801620003bc565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200050657607f821691505b602082108114156200051d576200051c620004be565b5b50919050565b6080516132736200054660003960008181610c88015261102401526132736000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063723f5352116100b8578063c0888f871161007c578063c0888f8714610378578063c87b56dd14610396578063e985e9c5146103c6578063ee442ca7146103f6578063f2dbea3414610412578063fef87a3b1461043057610137565b8063723f5352146102d2578063893d20e8146102f057806395d89b411461030e578063a22cb4651461032c578063a42f34ce1461034857610137565b8063246bb8e6116100ff578063246bb8e6146101f45780633548d7a3146102245780636352211e146102545780636e02007d1461028457806370a08231146102a257610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806319097126146101d6575b600080fd5b61015660048036038101906101519190611ced565b61044e565b6040516101639190611d35565b60405180910390f35b610174610530565b6040516101819190611de9565b60405180910390f35b6101a4600480360381019061019f9190611e41565b6105c2565b6040516101b19190611eaf565b60405180910390f35b6101d460048036038101906101cf9190611ef6565b610647565b005b6101de61075f565b6040516101eb9190611de9565b60405180910390f35b61020e60048036038101906102099190611f36565b6107f1565b60405161021b9190611de9565b60405180910390f35b61023e60048036038101906102399190611f36565b6108c2565b60405161024b9190611f72565b60405180910390f35b61026e60048036038101906102699190611e41565b61090b565b60405161027b9190611eaf565b60405180910390f35b61028c6109bd565b6040516102999190611fb8565b60405180910390f35b6102bc60048036038101906102b79190611f36565b6109e1565b6040516102c99190611f72565b60405180910390f35b6102da610a99565b6040516102e79190611f72565b60405180910390f35b6102f8610c84565b6040516103059190611eaf565b60405180910390f35b610316610cac565b6040516103239190611de9565b60405180910390f35b61034660048036038101906103419190611fff565b610d3e565b005b610362600480360381019061035d9190611f36565b610d54565b60405161036f9190611d35565b60405180910390f35b610380610daa565b60405161038d9190611de9565b60405180910390f35b6103b060048036038101906103ab9190611e41565b610e3c565b6040516103bd9190611de9565b60405180910390f35b6103e060048036038101906103db919061203f565b610f8e565b6040516103ed9190611d35565b60405180910390f35b610410600480360381019061040b9190611ef6565b611022565b005b61041a6111ba565b6040516104279190611de9565b60405180910390f35b61043861124c565b6040516104459190611f72565b60405180910390f35b60007f591d4bc0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610529575061052882611256565b5b9050919050565b60606000805461053f906120ae565b80601f016020809104026020016040519081016040528092919081815260200182805461056b906120ae565b80156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b5050505050905090565b60006105cd826112c0565b61060c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060390612152565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106528261090b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba906121e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106e261132c565b73ffffffffffffffffffffffffffffffffffffffff16148061071157506107108161070b61132c565b610f8e565b5b610750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074790612276565b60405180910390fd5b61075a8383611334565b505050565b6060600a805461076e906120ae565b80601f016020809104026020016040519081016040528092919081815260200182805461079a906120ae565b80156107e75780601f106107bc576101008083540402835291602001916107e7565b820191906000526020600020905b8154815290600101906020018083116107ca57829003601f168201915b5050505050905090565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461083d906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610869906120ae565b80156108b65780601f1061088b576101008083540402835291602001916108b6565b820191906000526020600020905b81548152906001019060200180831161089957829003601f168201915b50505050509050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90612308565b60405180910390fd5b80915050919050565b6109c5611bda565b6007604051806020016040529081600082015481525050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a499061239a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b1e576040517fbdaa602700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b2860076113ed565b6000610b346007611403565b9050610b403382611411565b6000610b8b82600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115eb565b9050610b97828261166c565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610c42929190611bed565b507f2d96a37fc0df820d14a130dc20cef776e701693d91f3b8087309137c53af29c53383604051610c749291906123ba565b60405180910390a1819250505090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060018054610cbb906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce7906120ae565b8015610d345780601f10610d0957610100808354040283529160200191610d34565b820191906000526020600020905b815481529060010190602001808311610d1757829003601f168201915b5050505050905090565b610d50610d4961132c565b83836116e0565b5050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054610db9906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610de5906120ae565b8015610e325780601f10610e0757610100808354040283529160200191610e32565b820191906000526020600020905b815481529060010190602001808311610e1557829003601f168201915b5050505050905090565b6060610e47826112c0565b610e86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7d90612455565b60405180910390fd5b6000600660008481526020019081526020016000208054610ea6906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed2906120ae565b8015610f1f5780601f10610ef457610100808354040283529160200191610f1f565b820191906000526020600020905b815481529060010190602001808311610f0257829003601f168201915b505050505090506000610f3061184d565b9050600081511415610f46578192505050610f89565b600082511115610f7b578082604051602001610f639291906124b1565b60405160208183030381529060405292505050610f89565b610f8484611864565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a7576040517f6213132300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008548111156110e3576040517fce9037f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f3a8f9cec46c0521152fbc9136996c3d56edcad069320d3a56b7e97a0ec355cb8826040516111ae9190611eaf565b60405180910390a15050565b6060600b80546111c9906120ae565b80601f01602080910402602001604051908101604052809291908181526020018280546111f5906120ae565b80156112425780601f1061121757610100808354040283529160200191611242565b820191906000526020600020905b81548152906001019060200180831161122557829003601f168201915b5050505050905090565b6000600854905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166113a78361090b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147890612521565b60405180910390fd5b61148a816112c0565b156114ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c19061258d565b60405180910390fd5b6114d66000838361190b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461152691906125dc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115e760008383611910565b5050565b60606000600a6115fa85611915565b600961160586611915565b611610600854611915565b600a600b60405160200161162a9796959493929190612cb6565b604051602081830303815290604052905061164481611a76565b6040516020016116549190612e85565b60405160208183030381529060405291505092915050565b611675826112c0565b6116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab90612f19565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906116db929190611bed565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561174f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174690612f85565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118409190611d35565b60405180910390a3505050565b606060405180602001604052806000815250905090565b606061186f826112c0565b6118ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a590613017565b60405180910390fd5b60006118b861184d565b905060008151116118d85760405180602001604052806000815250611903565b806118e284611915565b6040516020016118f39291906124b1565b6040516020818303038152906040525b915050919050565b505050565b505050565b6060600082141561195d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611a71565b600082905060005b6000821461198f57808061197890613037565b915050600a8261198891906130af565b9150611965565b60008167ffffffffffffffff8111156119ab576119aa6130e0565b5b6040519080825280601f01601f1916602001820160405280156119dd5781602001600182028036833780820191505090505b5090505b60008514611a6a576001826119f6919061310f565b9150600a85611a059190613143565b6030611a1191906125dc565b60f81b818381518110611a2757611a26613174565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611a6391906130af565b94506119e1565b8093505050505b919050565b6060600082511415611a9957604051806020016040528060008152509050611bd5565b60006040518060600160405280604081526020016131fe6040913990506000600360028551611ac891906125dc565b611ad291906130af565b6004611ade91906131a3565b67ffffffffffffffff811115611af757611af66130e0565b5b6040519080825280601f01601f191660200182016040528015611b295781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611b95576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611b3a565b5050600386510660018114611bb15760028114611bc457611bcc565b603d6001830353603d6002830353611bcc565b603d60018303535b50505080925050505b919050565b6040518060200160405280600081525090565b828054611bf9906120ae565b90600052602060002090601f016020900481019282611c1b5760008555611c62565b82601f10611c3457805160ff1916838001178555611c62565b82800160010185558215611c62579182015b82811115611c61578251825591602001919060010190611c46565b5b509050611c6f9190611c73565b5090565b5b80821115611c8c576000816000905550600101611c74565b5090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611cca81611c95565b8114611cd557600080fd5b50565b600081359050611ce781611cc1565b92915050565b600060208284031215611d0357611d02611c90565b5b6000611d1184828501611cd8565b91505092915050565b60008115159050919050565b611d2f81611d1a565b82525050565b6000602082019050611d4a6000830184611d26565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d8a578082015181840152602081019050611d6f565b83811115611d99576000848401525b50505050565b6000601f19601f8301169050919050565b6000611dbb82611d50565b611dc58185611d5b565b9350611dd5818560208601611d6c565b611dde81611d9f565b840191505092915050565b60006020820190508181036000830152611e038184611db0565b905092915050565b6000819050919050565b611e1e81611e0b565b8114611e2957600080fd5b50565b600081359050611e3b81611e15565b92915050565b600060208284031215611e5757611e56611c90565b5b6000611e6584828501611e2c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e9982611e6e565b9050919050565b611ea981611e8e565b82525050565b6000602082019050611ec46000830184611ea0565b92915050565b611ed381611e8e565b8114611ede57600080fd5b50565b600081359050611ef081611eca565b92915050565b60008060408385031215611f0d57611f0c611c90565b5b6000611f1b85828601611ee1565b9250506020611f2c85828601611e2c565b9150509250929050565b600060208284031215611f4c57611f4b611c90565b5b6000611f5a84828501611ee1565b91505092915050565b611f6c81611e0b565b82525050565b6000602082019050611f876000830184611f63565b92915050565b611f9681611e0b565b82525050565b602082016000820151611fb26000850182611f8d565b50505050565b6000602082019050611fcd6000830184611f9c565b92915050565b611fdc81611d1a565b8114611fe757600080fd5b50565b600081359050611ff981611fd3565b92915050565b6000806040838503121561201657612015611c90565b5b600061202485828601611ee1565b925050602061203585828601611fea565b9150509250929050565b6000806040838503121561205657612055611c90565b5b600061206485828601611ee1565b925050602061207585828601611ee1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806120c657607f821691505b602082108114156120da576120d961207f565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061213c602c83611d5b565b9150612147826120e0565b604082019050919050565b6000602082019050818103600083015261216b8161212f565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006121ce602183611d5b565b91506121d982612172565b604082019050919050565b600060208201905081810360008301526121fd816121c1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612260603883611d5b565b915061226b82612204565b604082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006122f2602983611d5b565b91506122fd82612296565b604082019050919050565b60006020820190508181036000830152612321816122e5565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612384602a83611d5b565b915061238f82612328565b604082019050919050565b600060208201905081810360008301526123b381612377565b9050919050565b60006040820190506123cf6000830185611ea0565b6123dc6020830184611f63565b9392505050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b600061243f603183611d5b565b915061244a826123e3565b604082019050919050565b6000602082019050818103600083015261246e81612432565b9050919050565b600081905092915050565b600061248b82611d50565b6124958185612475565b93506124a5818560208601611d6c565b80840191505092915050565b60006124bd8285612480565b91506124c98284612480565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061250b602083611d5b565b9150612516826124d5565b602082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612577601c83611d5b565b915061258282612541565b602082019050919050565b600060208201905081810360008301526125a68161256a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125e782611e0b565b91506125f283611e0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612627576126266125ad565b5b828201905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612668600183612475565b915061267382612632565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b60006126b4600983612475565b91506126bf8261267e565b600982019050919050565b60008190508160005260206000209050919050565b600081546126ec816120ae565b6126f68186612475565b94506001821660008114612711576001811461272257612755565b60ff19831686528186019350612755565b61272b856126ca565b60005b8381101561274d5781548189015260018201915060208101905061272e565b838801955050505b50505092915050565b7f2044656772656520230000000000000000000000000000000000000000000000600082015250565b6000612794600983612475565b915061279f8261275e565b600982019050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b60006127e0600283612475565b91506127eb826127aa565b600282019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b600061282c600a83612475565b9150612837826127f6565b600a82019050919050565b7f226465736372697074696f6e223a2022416e20617761726420636f6e6665727260008201527f6564206279206120636f6c6c656765206f7220756e697665727369747920736960208201527f676e696679696e6720746861742074686520726563697069656e74206861732060408201527f7361746973666163746f72696c7920636f6d706c65746564206120636f75727360608201527f65206f66207374756479222c0000000000000000000000000000000000000000608082015250565b6000612910608c83612475565b915061291b82612842565b608c82019050919050565b7f2261747472696275746573223a205b0000000000000000000000000000000000600082015250565b600061295c600f83612475565b915061296782612926565b600f82019050919050565b7f2274726169742074797065223a202253636f7265222c00000000000000000000600082015250565b60006129a8601683612475565b91506129b382612972565b601682019050919050565b7f2276616c7565223a200000000000000000000000000000000000000000000000600082015250565b60006129f4600983612475565b91506129ff826129be565b600982019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612a40600183612475565b9150612a4b82612a0a565b600182019050919050565b7f226d61785f76616c7565223a2000000000000000000000000000000000000000600082015250565b6000612a8c600d83612475565b9150612a9782612a56565b600d82019050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ad8600283612475565b9150612ae382612aa2565b600282019050919050565b7f2274726169742074797065223a20224d616a6f72222c00000000000000000000600082015250565b6000612b24601683612475565b9150612b2f82612aee565b601682019050919050565b7f2276616c7565223a202200000000000000000000000000000000000000000000600082015250565b6000612b70600a83612475565b9150612b7b82612b3a565b600a82019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b6000612bbc600183612475565b9150612bc782612b86565b600182019050919050565b7f2274726169742074797065223a202254797065206f6620646567726565222c00600082015250565b6000612c08601f83612475565b9150612c1382612bd2565b601f82019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612c54600183612475565b9150612c5f82612c1e565b600182019050919050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ca0600183612475565b9150612cab82612c6a565b600182019050919050565b6000612cc18261265b565b9150612ccc826126a7565b9150612cd8828a6126df565b9150612ce382612787565b9150612cef8289612480565b9150612cfa826127d3565b9150612d058261281f565b9150612d1182886126df565b9150612d1c826127d3565b9150612d2782612903565b9150612d328261294f565b9150612d3d8261265b565b9150612d488261299b565b9150612d53826129e7565b9150612d5f8287612480565b9150612d6a82612a33565b9150612d7582612a7f565b9150612d818286612480565b9150612d8c82612acb565b9150612d978261265b565b9150612da282612b17565b9150612dad82612b63565b9150612db982856126df565b9150612dc482612baf565b9150612dcf82612acb565b9150612dda8261265b565b9150612de582612bfb565b9150612df082612b63565b9150612dfc82846126df565b9150612e0782612baf565b9150612e1282612c47565b9150612e1d82612c93565b9150612e2882612c47565b915081905098975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612e6f601d83612475565b9150612e7a82612e39565b601d82019050919050565b6000612e9082612e62565b9150612e9c8284612480565b915081905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612f03602e83611d5b565b9150612f0e82612ea7565b604082019050919050565b60006020820190508181036000830152612f3281612ef6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612f6f601983611d5b565b9150612f7a82612f39565b602082019050919050565b60006020820190508181036000830152612f9e81612f62565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613001602f83611d5b565b915061300c82612fa5565b604082019050919050565b6000602082019050818103600083015261303081612ff4565b9050919050565b600061304282611e0b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613075576130746125ad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130ba82611e0b565b91506130c583611e0b565b9250826130d5576130d4613080565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061311a82611e0b565b915061312583611e0b565b925082821015613138576131376125ad565b5b828203905092915050565b600061314e82611e0b565b915061315983611e0b565b92508261316957613168613080565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006131ae82611e0b565b91506131b983611e0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131f2576131f16125ad565b5b82820290509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f04742fc4566b9d411dc747a415bf5e2ad811cc91ee884687ccf75ce7083d8cc64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063723f5352116100b8578063c0888f871161007c578063c0888f8714610378578063c87b56dd14610396578063e985e9c5146103c6578063ee442ca7146103f6578063f2dbea3414610412578063fef87a3b1461043057610137565b8063723f5352146102d2578063893d20e8146102f057806395d89b411461030e578063a22cb4651461032c578063a42f34ce1461034857610137565b8063246bb8e6116100ff578063246bb8e6146101f45780633548d7a3146102245780636352211e146102545780636e02007d1461028457806370a08231146102a257610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806319097126146101d6575b600080fd5b61015660048036038101906101519190611ced565b61044e565b6040516101639190611d35565b60405180910390f35b610174610530565b6040516101819190611de9565b60405180910390f35b6101a4600480360381019061019f9190611e41565b6105c2565b6040516101b19190611eaf565b60405180910390f35b6101d460048036038101906101cf9190611ef6565b610647565b005b6101de61075f565b6040516101eb9190611de9565b60405180910390f35b61020e60048036038101906102099190611f36565b6107f1565b60405161021b9190611de9565b60405180910390f35b61023e60048036038101906102399190611f36565b6108c2565b60405161024b9190611f72565b60405180910390f35b61026e60048036038101906102699190611e41565b61090b565b60405161027b9190611eaf565b60405180910390f35b61028c6109bd565b6040516102999190611fb8565b60405180910390f35b6102bc60048036038101906102b79190611f36565b6109e1565b6040516102c99190611f72565b60405180910390f35b6102da610a99565b6040516102e79190611f72565b60405180910390f35b6102f8610c84565b6040516103059190611eaf565b60405180910390f35b610316610cac565b6040516103239190611de9565b60405180910390f35b61034660048036038101906103419190611fff565b610d3e565b005b610362600480360381019061035d9190611f36565b610d54565b60405161036f9190611d35565b60405180910390f35b610380610daa565b60405161038d9190611de9565b60405180910390f35b6103b060048036038101906103ab9190611e41565b610e3c565b6040516103bd9190611de9565b60405180910390f35b6103e060048036038101906103db919061203f565b610f8e565b6040516103ed9190611d35565b60405180910390f35b610410600480360381019061040b9190611ef6565b611022565b005b61041a6111ba565b6040516104279190611de9565b60405180910390f35b61043861124c565b6040516104459190611f72565b60405180910390f35b60007f591d4bc0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610529575061052882611256565b5b9050919050565b60606000805461053f906120ae565b80601f016020809104026020016040519081016040528092919081815260200182805461056b906120ae565b80156105b85780601f1061058d576101008083540402835291602001916105b8565b820191906000526020600020905b81548152906001019060200180831161059b57829003601f168201915b5050505050905090565b60006105cd826112c0565b61060c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060390612152565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106528261090b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba906121e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106e261132c565b73ffffffffffffffffffffffffffffffffffffffff16148061071157506107108161070b61132c565b610f8e565b5b610750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074790612276565b60405180910390fd5b61075a8383611334565b505050565b6060600a805461076e906120ae565b80601f016020809104026020016040519081016040528092919081815260200182805461079a906120ae565b80156107e75780601f106107bc576101008083540402835291602001916107e7565b820191906000526020600020905b8154815290600101906020018083116107ca57829003601f168201915b5050505050905090565b6060600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461083d906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610869906120ae565b80156108b65780601f1061088b576101008083540402835291602001916108b6565b820191906000526020600020905b81548152906001019060200180831161089957829003601f168201915b50505050509050919050565b6000600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90612308565b60405180910390fd5b80915050919050565b6109c5611bda565b6007604051806020016040529081600082015481525050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a499061239a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b1e576040517fbdaa602700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b2860076113ed565b6000610b346007611403565b9050610b403382611411565b6000610b8b82600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115eb565b9050610b97828261166c565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610c42929190611bed565b507f2d96a37fc0df820d14a130dc20cef776e701693d91f3b8087309137c53af29c53383604051610c749291906123ba565b60405180910390a1819250505090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b606060018054610cbb906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce7906120ae565b8015610d345780601f10610d0957610100808354040283529160200191610d34565b820191906000526020600020905b815481529060010190602001808311610d1757829003601f168201915b5050505050905090565b610d50610d4961132c565b83836116e0565b5050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b606060098054610db9906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610de5906120ae565b8015610e325780601f10610e0757610100808354040283529160200191610e32565b820191906000526020600020905b815481529060010190602001808311610e1557829003601f168201915b5050505050905090565b6060610e47826112c0565b610e86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7d90612455565b60405180910390fd5b6000600660008481526020019081526020016000208054610ea6906120ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed2906120ae565b8015610f1f5780601f10610ef457610100808354040283529160200191610f1f565b820191906000526020600020905b815481529060010190602001808311610f0257829003601f168201915b505050505090506000610f3061184d565b9050600081511415610f46578192505050610f89565b600082511115610f7b578082604051602001610f639291906124b1565b60405160208183030381529060405292505050610f89565b610f8484611864565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a7576040517f6213132300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008548111156110e3576040517fce9037f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f3a8f9cec46c0521152fbc9136996c3d56edcad069320d3a56b7e97a0ec355cb8826040516111ae9190611eaf565b60405180910390a15050565b6060600b80546111c9906120ae565b80601f01602080910402602001604051908101604052809291908181526020018280546111f5906120ae565b80156112425780601f1061121757610100808354040283529160200191611242565b820191906000526020600020905b81548152906001019060200180831161122557829003601f168201915b5050505050905090565b6000600854905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166113a78361090b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147890612521565b60405180910390fd5b61148a816112c0565b156114ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c19061258d565b60405180910390fd5b6114d66000838361190b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461152691906125dc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115e760008383611910565b5050565b60606000600a6115fa85611915565b600961160586611915565b611610600854611915565b600a600b60405160200161162a9796959493929190612cb6565b604051602081830303815290604052905061164481611a76565b6040516020016116549190612e85565b60405160208183030381529060405291505092915050565b611675826112c0565b6116b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ab90612f19565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906116db929190611bed565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561174f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174690612f85565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118409190611d35565b60405180910390a3505050565b606060405180602001604052806000815250905090565b606061186f826112c0565b6118ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a590613017565b60405180910390fd5b60006118b861184d565b905060008151116118d85760405180602001604052806000815250611903565b806118e284611915565b6040516020016118f39291906124b1565b6040516020818303038152906040525b915050919050565b505050565b505050565b6060600082141561195d576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611a71565b600082905060005b6000821461198f57808061197890613037565b915050600a8261198891906130af565b9150611965565b60008167ffffffffffffffff8111156119ab576119aa6130e0565b5b6040519080825280601f01601f1916602001820160405280156119dd5781602001600182028036833780820191505090505b5090505b60008514611a6a576001826119f6919061310f565b9150600a85611a059190613143565b6030611a1191906125dc565b60f81b818381518110611a2757611a26613174565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611a6391906130af565b94506119e1565b8093505050505b919050565b6060600082511415611a9957604051806020016040528060008152509050611bd5565b60006040518060600160405280604081526020016131fe6040913990506000600360028551611ac891906125dc565b611ad291906130af565b6004611ade91906131a3565b67ffffffffffffffff811115611af757611af66130e0565b5b6040519080825280601f01601f191660200182016040528015611b295781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611b95576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611b3a565b5050600386510660018114611bb15760028114611bc457611bcc565b603d6001830353603d6002830353611bcc565b603d60018303535b50505080925050505b919050565b6040518060200160405280600081525090565b828054611bf9906120ae565b90600052602060002090601f016020900481019282611c1b5760008555611c62565b82601f10611c3457805160ff1916838001178555611c62565b82800160010185558215611c62579182015b82811115611c61578251825591602001919060010190611c46565b5b509050611c6f9190611c73565b5090565b5b80821115611c8c576000816000905550600101611c74565b5090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611cca81611c95565b8114611cd557600080fd5b50565b600081359050611ce781611cc1565b92915050565b600060208284031215611d0357611d02611c90565b5b6000611d1184828501611cd8565b91505092915050565b60008115159050919050565b611d2f81611d1a565b82525050565b6000602082019050611d4a6000830184611d26565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d8a578082015181840152602081019050611d6f565b83811115611d99576000848401525b50505050565b6000601f19601f8301169050919050565b6000611dbb82611d50565b611dc58185611d5b565b9350611dd5818560208601611d6c565b611dde81611d9f565b840191505092915050565b60006020820190508181036000830152611e038184611db0565b905092915050565b6000819050919050565b611e1e81611e0b565b8114611e2957600080fd5b50565b600081359050611e3b81611e15565b92915050565b600060208284031215611e5757611e56611c90565b5b6000611e6584828501611e2c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e9982611e6e565b9050919050565b611ea981611e8e565b82525050565b6000602082019050611ec46000830184611ea0565b92915050565b611ed381611e8e565b8114611ede57600080fd5b50565b600081359050611ef081611eca565b92915050565b60008060408385031215611f0d57611f0c611c90565b5b6000611f1b85828601611ee1565b9250506020611f2c85828601611e2c565b9150509250929050565b600060208284031215611f4c57611f4b611c90565b5b6000611f5a84828501611ee1565b91505092915050565b611f6c81611e0b565b82525050565b6000602082019050611f876000830184611f63565b92915050565b611f9681611e0b565b82525050565b602082016000820151611fb26000850182611f8d565b50505050565b6000602082019050611fcd6000830184611f9c565b92915050565b611fdc81611d1a565b8114611fe757600080fd5b50565b600081359050611ff981611fd3565b92915050565b6000806040838503121561201657612015611c90565b5b600061202485828601611ee1565b925050602061203585828601611fea565b9150509250929050565b6000806040838503121561205657612055611c90565b5b600061206485828601611ee1565b925050602061207585828601611ee1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806120c657607f821691505b602082108114156120da576120d961207f565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061213c602c83611d5b565b9150612147826120e0565b604082019050919050565b6000602082019050818103600083015261216b8161212f565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006121ce602183611d5b565b91506121d982612172565b604082019050919050565b600060208201905081810360008301526121fd816121c1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612260603883611d5b565b915061226b82612204565b604082019050919050565b6000602082019050818103600083015261228f81612253565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006122f2602983611d5b565b91506122fd82612296565b604082019050919050565b60006020820190508181036000830152612321816122e5565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612384602a83611d5b565b915061238f82612328565b604082019050919050565b600060208201905081810360008301526123b381612377565b9050919050565b60006040820190506123cf6000830185611ea0565b6123dc6020830184611f63565b9392505050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b600061243f603183611d5b565b915061244a826123e3565b604082019050919050565b6000602082019050818103600083015261246e81612432565b9050919050565b600081905092915050565b600061248b82611d50565b6124958185612475565b93506124a5818560208601611d6c565b80840191505092915050565b60006124bd8285612480565b91506124c98284612480565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061250b602083611d5b565b9150612516826124d5565b602082019050919050565b6000602082019050818103600083015261253a816124fe565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612577601c83611d5b565b915061258282612541565b602082019050919050565b600060208201905081810360008301526125a68161256a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006125e782611e0b565b91506125f283611e0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612627576126266125ad565b5b828201905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612668600183612475565b915061267382612632565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b60006126b4600983612475565b91506126bf8261267e565b600982019050919050565b60008190508160005260206000209050919050565b600081546126ec816120ae565b6126f68186612475565b94506001821660008114612711576001811461272257612755565b60ff19831686528186019350612755565b61272b856126ca565b60005b8381101561274d5781548189015260018201915060208101905061272e565b838801955050505b50505092915050565b7f2044656772656520230000000000000000000000000000000000000000000000600082015250565b6000612794600983612475565b915061279f8261275e565b600982019050919050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b60006127e0600283612475565b91506127eb826127aa565b600282019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b600061282c600a83612475565b9150612837826127f6565b600a82019050919050565b7f226465736372697074696f6e223a2022416e20617761726420636f6e6665727260008201527f6564206279206120636f6c6c656765206f7220756e697665727369747920736960208201527f676e696679696e6720746861742074686520726563697069656e74206861732060408201527f7361746973666163746f72696c7920636f6d706c65746564206120636f75727360608201527f65206f66207374756479222c0000000000000000000000000000000000000000608082015250565b6000612910608c83612475565b915061291b82612842565b608c82019050919050565b7f2261747472696275746573223a205b0000000000000000000000000000000000600082015250565b600061295c600f83612475565b915061296782612926565b600f82019050919050565b7f2274726169742074797065223a202253636f7265222c00000000000000000000600082015250565b60006129a8601683612475565b91506129b382612972565b601682019050919050565b7f2276616c7565223a200000000000000000000000000000000000000000000000600082015250565b60006129f4600983612475565b91506129ff826129be565b600982019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612a40600183612475565b9150612a4b82612a0a565b600182019050919050565b7f226d61785f76616c7565223a2000000000000000000000000000000000000000600082015250565b6000612a8c600d83612475565b9150612a9782612a56565b600d82019050919050565b7f7d2c000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ad8600283612475565b9150612ae382612aa2565b600282019050919050565b7f2274726169742074797065223a20224d616a6f72222c00000000000000000000600082015250565b6000612b24601683612475565b9150612b2f82612aee565b601682019050919050565b7f2276616c7565223a202200000000000000000000000000000000000000000000600082015250565b6000612b70600a83612475565b9150612b7b82612b3a565b600a82019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b6000612bbc600183612475565b9150612bc782612b86565b600182019050919050565b7f2274726169742074797065223a202254797065206f6620646567726565222c00600082015250565b6000612c08601f83612475565b9150612c1382612bd2565b601f82019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612c54600183612475565b9150612c5f82612c1e565b600182019050919050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ca0600183612475565b9150612cab82612c6a565b600182019050919050565b6000612cc18261265b565b9150612ccc826126a7565b9150612cd8828a6126df565b9150612ce382612787565b9150612cef8289612480565b9150612cfa826127d3565b9150612d058261281f565b9150612d1182886126df565b9150612d1c826127d3565b9150612d2782612903565b9150612d328261294f565b9150612d3d8261265b565b9150612d488261299b565b9150612d53826129e7565b9150612d5f8287612480565b9150612d6a82612a33565b9150612d7582612a7f565b9150612d818286612480565b9150612d8c82612acb565b9150612d978261265b565b9150612da282612b17565b9150612dad82612b63565b9150612db982856126df565b9150612dc482612baf565b9150612dcf82612acb565b9150612dda8261265b565b9150612de582612bfb565b9150612df082612b63565b9150612dfc82846126df565b9150612e0782612baf565b9150612e1282612c47565b9150612e1d82612c93565b9150612e2882612c47565b915081905098975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612e6f601d83612475565b9150612e7a82612e39565b601d82019050919050565b6000612e9082612e62565b9150612e9c8284612480565b915081905092915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612f03602e83611d5b565b9150612f0e82612ea7565b604082019050919050565b60006020820190508181036000830152612f3281612ef6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612f6f601983611d5b565b9150612f7a82612f39565b602082019050919050565b60006020820190508181036000830152612f9e81612f62565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613001602f83611d5b565b915061300c82612fa5565b604082019050919050565b6000602082019050818103600083015261303081612ff4565b9050919050565b600061304282611e0b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613075576130746125ad565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130ba82611e0b565b91506130c583611e0b565b9250826130d5576130d4613080565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061311a82611e0b565b915061312583611e0b565b925082821015613138576131376125ad565b5b828203905092915050565b600061314e82611e0b565b915061315983611e0b565b92508261316957613168613080565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006131ae82611e0b565b91506131b983611e0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156131f2576131f16125ad565b5b82820290509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f04742fc4566b9d411dc747a415bf5e2ad811cc91ee884687ccf75ce7083d8cc64736f6c634300080a0033",
  "devdoc": {
    "author": "Ghaieth BEN MOUSSA",
    "details": "This contract is used to award degrees to students who graduated in two steps: 1. Only the owner of the contract can issue degrees with the function `issueDegree(address to, uint256 score)` 2. Then, the student can claim the degree with the function `claimDegree()` This type of token is called a Soul Bound Token because once the token  has been claimed by the student, it can not be transfered to anyone else.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      }
    },
    "title": "UniversityDegree",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Non-transferable Soul Bound Token (NFT) smart contract for university degrees and diplomas",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 434,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 436,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 440,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 444,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 448,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 454,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1107,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 23,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1711_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_degreeMaxScore",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 29,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_degreeImage",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_degreeMajor",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_degreeType",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 37,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_issuedDegrees",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 41,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_studentToScore",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 45,
        "contract": "contracts/UniversityDegree.sol:UniversityDegree",
        "label": "s_studentToDegree",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1711_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1710,
            "contract": "contracts/UniversityDegree.sol:UniversityDegree",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}